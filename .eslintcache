[{"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/index.js":"1","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/App.js":"2","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/columns.js":"3","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/data/dataEditor.js":"4","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/ColumnFilter.js":"5","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/DataTable.js":"6","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/Checkbox.js":"7","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/Map.js":"8","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/Charts.js":"9","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/MapMarker.js":"10"},{"size":219,"mtime":1611497185019,"results":"11","hashOfConfig":"12"},{"size":201,"mtime":1611521710966,"results":"13","hashOfConfig":"12"},{"size":1090,"mtime":1611504148877,"results":"14","hashOfConfig":"12"},{"size":513,"mtime":1611496025512,"results":"15","hashOfConfig":"12"},{"size":311,"mtime":1611482583048,"results":"16","hashOfConfig":"12"},{"size":5565,"mtime":1611522812966,"results":"17","hashOfConfig":"12"},{"size":419,"mtime":1611492849653,"results":"18","hashOfConfig":"12"},{"size":839,"mtime":1611524771675,"results":"19","hashOfConfig":"12"},{"size":985,"mtime":1611520328829,"results":"20","hashOfConfig":"12"},{"size":324,"mtime":1611525170899,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"xgb5aa",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/index.js",[],["45","46"],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/App.js",[],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/columns.js",[],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/data/dataEditor.js",[],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/ColumnFilter.js",[],["47","48"],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/DataTable.js",["49"],"import { useMemo } from 'react';\nimport Map from './Map';\n\n// Modules\nimport {\n  useTable,\n  useSortBy,\n  useGlobalFilter,\n  useFilters,\n  usePagination,\n  useRowSelect,\n} from 'react-table';\nimport { Table } from 'react-super-responsive-table';\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css';\nimport {\n  TiArrowSortedDown,\n  TiArrowSortedUp,\n  TiArrowUnsorted,\n} from 'react-icons/ti';\n\n// Local\nimport raw_data from '../data/dataEditor';\nimport { COLUMNS } from './columns';\nimport Checkbox from './Checkbox';\nimport './table.css';\nimport Charts from './Charts';\n\nexport default function DataTable() {\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => raw_data, []);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n    },\n    useFilters,\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    (hooks) => {\n      hooks.visibleColumns.push((columns) => {\n        return [\n          {\n            id: 'selection',\n            Header: ({ getToggleAllRowsSelectedProps }) => (\n              <Checkbox {...getToggleAllRowsSelectedProps()} />\n            ),\n            Cell: ({ row }) => (\n              <Checkbox {...row.getToggleRowSelectedProps()} />\n            ),\n          },\n          ...columns,\n        ];\n      });\n    }\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    gotoPage,\n    pageCount,\n    setPageSize,\n    prepareRow,\n    allColumns,\n    getToggleHideAllColumnsProps,\n    selectedFlatRows,\n    state,\n  } = tableInstance;\n\n  const { pageIndex, pageSize } = state;\n\n  return (\n    <>\n      <h2>Data Table</h2>\n      <p>\n        You can select or deselect every data field, search through the table\n        for specific values, use the arrow keys to filter up or down and change\n        the pagination and number of data rows on the bar at the bottom of the\n        page\n      </p>\n      <div className=\"boxes\">\n        <div className=\"boxes_inputs\">\n          <Checkbox {...getToggleHideAllColumnsProps()} /> Toggle All\n        </div>\n        {allColumns.map((column) => (\n          <div key={column.id} className={'boxes_inputs' + ' ' + column.id}>\n            <label>\n              <input type=\"checkbox\" {...column.getToggleHiddenProps()} />\n              {column.Header}\n            </label>\n          </div>\n        ))}\n      </div>\n      <Table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  <span className=\"sort_icon\">\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <TiArrowSortedDown />\n                      ) : (\n                        <TiArrowSortedUp />\n                      )\n                    ) : (\n                      <TiArrowUnsorted />\n                    )}\n                  </span>\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n          <tr>\n            <td> </td>\n          </tr>\n        </tbody>\n        <tfoot>\n          {footerGroups.map((footerGroup) => (\n            <tr {...footerGroup.getFooterGroupProps()}>\n              {footerGroup.headers.map((column) => (\n                <td {...column.getFooterProps}>{column.render('Footer')}</td>\n              ))}\n            </tr>\n          ))}\n        </tfoot>\n      </Table>\n      <div>\n        <span>\n          Page{' '}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{' '}\n        </span>\n        <span>\n          | Go to Page:{' '}\n          <input\n            type=\"number\"\n            defaultValue={pageIndex + 1}\n            onChange={(e) => {\n              const pageNumber = e.target.value\n                ? Number(e.target.value) - 1\n                : 0;\n              gotoPage(pageNumber);\n            }}\n          />\n        </span>\n        <select\n          value={pageSize}\n          onChange={(e) => setPageSize(Number(e.target.value))}\n        >\n          {[10, 25, 50, 100, 250, 500, 1000].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              Show {pageSize}\n            </option>\n          ))}\n        </select>\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n          {'<<'}\n        </button>\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\n          Previous\n        </button>\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\n          Next\n        </button>\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n          {'>>'}\n        </button>\n      </div>\n      <Map data={selectedFlatRows} />\n      <Charts data={selectedFlatRows} />\n\n    </>\n  );\n}\n","/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/Checkbox.js",[],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/Map.js",[],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/Charts.js",[],"/home/benpreston/Documents/coding/react/river_sensor_data_benpreston/src/components/MapMarker.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"50","replacedBy":"54"},{"ruleId":"52","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":97,"column":58,"nodeType":"58","messageId":"59","endLine":97,"endColumn":59},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],["60"],["61"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]